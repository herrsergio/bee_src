[bParamFile]

# This file and others like it will replace Robot.h.  This will make
# configuration a runtime event rather than a compile time event.

# These are used as prefixes for the characteristics below
# 'none' and '' (returned by bGetParam() as NULL) are special cases
# programs should not interpret the first item (the robot.*'s) but
# should use that to get the right parameter for the system and use
# the *.type entries to identify the system

[robot]
name		B14		# B21, B21b, B14, Xavier, or Ramona
				# This defines base, enclosure, 
				# voltage, ir, sonar and tactile.
				# These are lumped together because
				# they are naturally lumped by base
				# system configuration.

speech		none		# none, DTPC or DTLT (DoubleTalk)
pantilt		none		# none or DP
compass		none		# none or KVH
arm		none		# none, B21 or B21-laser
laser		none		# none or SICK
framegrabber    none		# none or matrox

# command line parameters should have no prefix that I can think of
[]  
TCXHOST		tx8
fork		yes

# ---------------------------------------------------------------------------

[B21.base]
type			B21
host			localhost
dev			/dev/cur0
bps			9600
radius			26.7		# cm - overall robot radius

# reduction - 3:1*79:12 = 19.75:1
# 500 encoder counts/motor turn
# 4.4 inch wheel

encPerCm		281.2		# encoders/cm
posPerCm		1.098		# deadreck_pos/cm
rotBackwards		0		# 0 = normal rotation
hasIndex		1		# 1 = has index sensor

[B21.enclosure]
type			B21
radius			24.8		# cm - radius of enclosure

[B21.volt]
type			M72
warn			44		# warning voltage
panic			39		# panic voltage

[B21.ir]
type			MSP
dev			/dev/abus
geometry		{ 24, 24, 8 }	# need routine to parse arrays/structs
					# it should return element as string.
[B21.sonar]
type			MSP		# file parser should recognize "\\n"
dev			/dev/abus	# for line continuation.
geometry		{ 24 }

[B21.tactile]
type			MSP
dev			/dev/abus
geometry		{ 12, 12, 16, 16 }

# ---------------------------------------------------------------------------

[B21b.base]
type			B21
host			localhost
dev			/dev/cur0
bps			9600
radius			26.7		# cm - overall robot radius

# reduction - 3:1*72:12 = 18.00:1
# 500 encoder counts/motor turn
# 4.4 inch wheel

encPerCm		256.3		# encoders/cm
posPerCm		1.001		# deadreck_pos/cm
rotBackwards		0		# 0 = normal rotation
hasIndex		1		# 1 = has index sensor

[B21b.enclosure]
type			B21
radius			24.8		# cm - radius of enclosure

[B21b.volt]
type			M72
warn			44		# warning voltage
panic			39		# panic voltage

[B21b.ir]
type			MSP
dev			/dev/abus
geometry		{ 24, 24, 8 }	# need routine to parse arrays/structs
					# it should return element as string.
[B21b.sonar]
type			MSP		# file parser should recognize "\\n"
dev			/dev/abus	# for line continuation.
geometry		{ 24 }

[B21b.tactile]
type			MSP
dev			/dev/abus
geometry		{ 12, 12, 16, 16 }

# ---------------------------------------------------------------------------

[B14.base]
type			B14
host			localhost
dev			/dev/cur0
bps			9600
radius			16.8		# cm - overall robot radius

# reduction - 4:1*44:16 = 11.00:1
# 500 encoder counts/motor turn
# 3.25 inch wheel

encPerCm		212.0		# encoders/cm
posPerCm		.828		# dead-reck_pos/cm
rotBackwards		0		# 0 = normal rotation
hasIndex		1		# 1 = has index sensor

[B14.enclosure]
type			B14
radius			15.3		# cm - radius of enclosure

[B14.volt]
type			B14
warn			10		# warning voltage
panic			9		# panic voltage

[B14.ir]
type			MSP
dev			/dev/abus
geometry		{ 16 }

[B14.sonar]
type			MSP
dev			/dev/abus
geometry		{ 16 }

[B14.tactile]
type			MSP
dev			/dev/abus
geometry		{ 8, 8, 6 }

# ---------------------------------------------------------------------------

[Ramona.base]
type			Ramona
host			localhost
dev			/dev/cur0
bps			9600
radius			31		# cm - overall robot radius

# For B21
# reduction - 3:1*79:12 = 19.75:1
# 500 encoder counts/motor turn
# 4.4 inch wheel

encPerCm		662		# encoders/cm
posPerCm		2.586		# deadreck_pos/cm
rotBackwards		1		# 0 = normal rotation
hasIndex		0		# 1 = has index sensor

[Ramona.enclosure]
type			B21
radius			24.8		# cm - radius of enclosure

[Ramona.volt]
type			M72
warn			44		# warning voltage
panic			39		# panic voltage

[Ramona.ir]
type			MSP
dev			/dev/abus
geometry		{ 24 }

[Ramona.sonar]
type			MSP		# file parser should recognize "\\n"
dev			/dev/abus	# for line continuation.
geometry		{ 24 }

[Ramona.tactile]
type			MSP
dev			/dev/abus
geometry		{ 12, 12 }

# ---------------------------------------------------------------------------

[DTPC.speech]
type			doubleTalkPC
host			localhost
dev			/dev/port

# ---------------------------------------------------------------------------

[DTLT.speech]
type			doubleTalkLT
host			localhost
dev			/dev/cur3
bps			9600

# ---------------------------------------------------------------------------

[DP.pantilt]
type			directedPerception
host			localhost
dev			/dev/cur1
bps			9600

# ---------------------------------------------------------------------------

[KVH.compass]
type			KVH
host			localhost
dev			/dev/cur2
bps			4800

# ---------------------------------------------------------------------------

[B21.arm]
type			B21-arm
mast.host		localhost
mast.dev		/dev/cur4
mast.bps		9600
mast.stow		34304
mast.boomTravel		80640

grip.host		localhost
grip.dev		/dev/cur5
grip.bps		9600

# ---------------------------------------------------------------------------

[B21-laser.arm]
type			B21-arm
mast.host		localhost
mast.dev		/dev/cur4
mast.bps		9600
mast.stow		46000
mast.boomTravel		80640

grip.host		localhost
grip.dev		/dev/cur5
grip.bps		9600

# ---------------------------------------------------------------------------

[Ramona-arm.arm]
type			B21-arm
mast.host		localhost
mast.dev		/dev/cur4
mast.bps		9600
mast.stow		34304
mast.boomTravel		90000

grip.host		localhost
grip.dev		/dev/cur5
grip.bps		9600

# ---------------------------------------------------------------------------

[SICK.laser]
type			SICK PLS101
host			localhost
dev			/dev/cur6
bps			9600

# ---------------------------------------------------------------------------

[matrox.framegrabber]
type                    matrox-meteor
host			localhost
                                        # 0 for no grabber
                                        # 1 for first grabber
usegrabber              1               # 2 for second grabber
                                        # 3 for both grabbers
dev1                    /dev/mmetfgrab0
dev2                    /dev/mmetfgrab1

# ---------------------------------------------------------------------------

[Rhino.base]
type			B21
host			localhost
dev			/dev/ttyS0
bps			9600
radius			26.7		# cm - overall robot radius

# reduction - 3:1*79:12 = 19.75:1
# 500 encoder counts/motor turn
# 4.4 inch wheel

# UNIBONN: corrected values by dividing B21 values by 1.024609
encPerCm                274.44615       # encoders/cm
posPerCm                1.0716283       # deadreck_pos/cm
rotBackwards            0               # 0 = normal rotation
hasIndex                1               # 1 = has index sensor

[Rhino.enclosure]
type			B21
radius			24.8		# cm - radius of enclosure

[Rhino.volt]
type			M72
warn			44		# warning voltage
panic			39		# panic voltage

[Rhino.ir]
type			MSP
dev			/dev/abus
geometry		{ 24, 24, 8 }	# need routine to parse arrays/structs
					# it should return element as string.
[Rhino.sonar]
type			MSP		# file parser should recognize "\\n"
dev			/dev/abus	# for line continuation.
geometry		{ 24 }

[Rhino.tactile]
type			MSP
dev			/dev/abus
geometry		{ 12, 12, 16, 16 }

[Rhino.arm]
type			B21-arm
mast.host		localhost
mast.dev		/dev/ttyS2
mast.bps		9600
mast.stow		34304
mast.boomTravel		90000

grip.host		localhost
grip.dev		/dev/ttyS3
grip.bps		9600

[Rhino.pantilt]
type			directedPerception
host			localhost
dev			/dev/ttyS0
bps			9600

# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------

# programOnHost *** means, pick the entry from the hardware list above.
# the mapping between program and hardware entry is hardwired into console.

[tcxServer]
name		tcx
programOnHost	***
howStart1	/usr/bin/ssh
howStart2	-n
howStart3	tcxServer -fork=no
howKill1	/usr/bin/ssh
howKill2	-n
howKill3	/bin/sh -c 'killall tcxServer 2>&1'
dep		{}

[armServer]
name		arm
programOnHost	***
howStart1	/usr/bin/ssh
howStart2	-n
howStart3	armServer -fork=no
howKill1	/usr/bin/ssh
howKill2	-n
howKill3	/bin/sh -c 'killall armServer 2>&1'
dep		{ tcxServer }

[baseServer]
name		base
programOnHost	***
howStart1	/usr/bin/ssh
howStart2	-n
howStart3	baseServer -fork=no
howKill1	/usr/bin/ssh
howKill2	-n
howKill3	/bin/sh -c 'killall baseServer 2>&1'
dep		{ tcxServer }

[buttonServer]
name		button
programOnHost	***
howStart1	/usr/bin/ssh
howStart2	-n
howStart3	buttonServer -fork=no
howKill1	/usr/bin/ssh
howKill2	-n
howKill3	/bin/sh -c 'killall buttonServer 2>&1'
dep		{ tcxServer }

[cameraServer]
name		camera
programOnHost	***
howStart1	/usr/bin/ssh
howStart2	-n
howStart3	cameraServer -fork=no
howKill1	/usr/bin/ssh
howKill2	-n
howKill3	/bin/sh -c 'killall cameraServer 2>&1'
dep		{ tcxServer }

[colliServer]
name		collision
programOnHost	***
howStart1	/usr/bin/ssh
howStart2	-n
howStart3	colliServer -fork=no
howKill1	/usr/bin/ssh
howKill2	-n
howKill3	/bin/sh -c 'killall colliServer 2>&1'
dep		{ tcxServer, baseServer } 

[laserServer]
name		laser
programOnHost	***
howStart1	/usr/bin/ssh
howStart2	-n
howStart3	laserServer -fork=no
howKill1	/usr/bin/ssh
howKill2	-n
howKill3	/bin/sh -c 'killall laserServer 2>&1'
dep		{ tcxServer }

[pantiltServer]
name		pantilt
programOnHost	***
howStart1	/usr/bin/ssh
howStart2	-n
howStart3	pantiltServer -fork=no
howKill1	/usr/bin/ssh
howKill2	-n
howKill3	/bin/sh -c 'killall pantiltServer 2>&1'
dep		{ tcxServer }

[speechServer]
name		speech
programOnHost	***
howStart1	/usr/bin/ssh
howStart2	-n
howStart3	speechServer -fork=no
howKill1	/usr/bin/ssh
howKill2	-n
howKill3	/bin/sh -c 'killall speechServer 2>&1'
dep		{ tcxServer }
