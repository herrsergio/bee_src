.KEEP_STATE:

##
## This is the system configuration file that is used by all 
## packages.  It is presently generated by hand.  It should
## be generated by a GNU Autoconf script.
##

BEE_VER   = 1
BEE_SUB   = 3
BEE_PATCH = 8

##
## Choose your robot type or override this
## this setting on the command line.
## Note:  The possible values of ROBOT
##		match a set of header files.
##

#ROBOT = B21
ROBOT = B14
#ROBOT = B14_PUSHER

##
## Special options for RHINO
##


##
## Executables (indirect)
##

SHELL         = bash
RM            = rm -rf
ETAGS         = etags
CC            = gcc
CXX           = g++
CPP           = gcc -E 
AR            = ar r
RANLIB        = ranlib
MKDIR         = install -d
INSTALL_TEXT  = install -m 664
INSTALL_EXEC  = install -m 775 $(STRIP)
INSTALL_LIB   = install -m 664
INSTALL_H     = -$(SILENT) ln -s
#INSTALL_H     = $(SILENT) cp -fd
INSTALL_ETC   = -$(SILENT) ln -s
#INSTALL_ETC   = $(SILENT) cp -fd
CP            = cp
ECHO          = @echo
#SUDO          = sudo
SUDO          = echo "* SUDO DID NOT DO:"
LEX           = flex -i
YACC          = yacc -dv
CURSES_TYPE   = curses
PERL          = perl
AWK           = awk

##
## Architecture independence
## This section will need much work to make the system truely portable
##

OS_NAME      = $(shell uname -s)
OS_VER       = $(shell uname -r | $(AWK) '{print substr($$1,0,1)}' )
OS_MINOR_VER = $(shell uname -r | $(AWK) '{print substr($$1,3,1)}' )
CPU_TYPE     = $(shell uname -m)

##
## arch options
##

ifeq ($(OS_NAME),Linux)
OS_TAG =
#CFLAGS += -m486
else
ifeq ($(OS_VER), 5)
OS_TAG = _solaris
#CFLAGS += -msupersparc
else
OS_TAG = _sun
endif
endif

DEPEND      = Makefile.depend$(OS_TAG)
OBJ_DIR     = obj$(OS_TAG)

##
## Install directories
##

PREFIX    = ../..
PREFIX_2  = ..
POSTFIX   = 

SRC_DIR   = $(PREFIX)/src$(POSTFIX)
INC_DIR   = $(PREFIX)/include$(POSTFIX)
LIB_DIR   = $(PREFIX)/lib$(OS_TAG)$(POSTFIX)
BIN_DIR   = $(PREFIX)/bin$(OS_TAG)$(POSTFIX)
ETC_DIR   = $(PREFIX)/etc$(POSTFIX)
LOG_DIR   = $(PREFIX)/log$(POSTFIX)
DOC_DIR   = $(PREFIX)/doc$(POSTFIX)
DOC_DIR_2 = $(PREFIX_2)/doc$(POSTFIX)

##
## Official release (permits users to work with incomplete code)
##

BEE_HOME_DIR = ~bee

ifeq ($(shell if [ -d $(BEEHOME) ] ; then echo $(BEEHOME); fi),)
ifeq ($(shell echo $(BEE_HOME_DIR) | fgrep -v '~'),)
		ifeq ($(OS_NAME),Linux)
			OFFICIAL_ROOT_DIR  =  /home/rhino/bee
		else
			OFFICIAL_ROOT_DIR  =  /home/rhino/rhino/bee
		endif
	else
		OFFICIAL_ROOT_DIR  =  `echo $(BEE_HOME_DIR)`
	endif
else
	OFFICIAL_ROOT_DIR  =  `echo $(BEEHOME)`
endif

OFFICIAL_INC_DIR   = $(OFFICIAL_ROOT_DIR)/include
OFFICIAL_SRC_DIR   = $(OFFICIAL_ROOT_DIR)/src
OFFICIAL_ETC_DIR   = $(OFFICIAL_ROOT_DIR)/etc
OFFICIAL_LIB_DIR   = $(OFFICIAL_ROOT_DIR)/lib$(OS_TAG)
OFFICIAL_DOC_DIR   = $(OFFICIAL_ROOT_DIR)/doc
OFFICIAL_DAT_DIR   = $(OFFICIAL_ROOT_DIR)/data
OFFICIAL_BIN_DIR   = $(OFFICIAL_ROOT_DIR)/bin$(OS_TAG)

##
## Compilation options
##

INCLUDES   += -I. \
              -I$(INC_DIR) \
              -I$(OFFICIAL_INC_DIR) \
              -I/usr/include/ncurses \
	      -I/usr/X11R6/include \
	      -I/usr/local/X11R6/include \
	      -I/usr/include/X11R6 \
	      -I/usr/local/include/X11R6 \
	      -I/usr/X11/include \
	      -I/usr/local/X11/include \
	      -I/usr/include/X11 \
	      -I/usr/local/include/X11 \
	      -I/usr/X11R5/include \
	      -I/usr/local/X11R5/include \
	      -I/usr/include/X11R5 \
	      -I/usr/local/include/X11R5

LIB_DIRS   += -L. \
              -L$(OBJ_DIR) \
              -L$(LIB_DIR) \
              -L$(OFFICIAL_LIB_DIR) \
	      -L/usr/X11R6/lib \
	      -L/usr/local/X11R6/lib \
	      -L/usr/lib/X11R6 \
	      -L/usr/local/lib/X11R6 \
	      -L/usr/X11/lib \
	      -L/usr/local/X11/lib \
	      -L/usr/lib/X11 \
	      -L/usr/local/lib/X11 \
	      -L/usr/X11R5/lib \
	      -L/usr/local/X11R5/lib \
	      -L/usr/lib/X11R5 \
	      -L/usr/local/lib/X11R5 \
	      -L/usr/lib/termcap

CFLAGS     += $(OPT_FLAGS) $(USER_DEFINES) 
CFLAGS     += -W
CFLAGS     += -Wswitch
CFLAGS     += -Wuninitialized
CFLAGS     += -Wparentheses
# CFLAGS   += -Wall
# CFLAGS   += -fno-common
# CFLAGS   += -Wl,-warn-common
# CFLAGS   += -Werror
# CFLAGS   += -Wshadow
CFLAGS     += -DCURSES_TYPE=$(CURSES_TYPE) -D$(ROBOT)

##
## Either "@" for quiet or "" for verbose
##

SILENT = @

##
## Compiler optimization/debugging flags (-g -O2 can be combined)
##

OPT_FLAGS   = -g -O4
#OPT_FLAGS   = -g -O0

##
## uncomment to strip executables during installation
##

#STRIP = -s

##
## OS-specific libraries
##

ifeq ($(OS_NAME),Linux)
OS_LIBS = -lbsd
else
ifeq ($(OS_VER), 5)
OS_LIBS = -lsocket -lnsl
else
OS_LIBS =
endif
endif






ifeq ($(OS_NAME),Linux)
LINUX_MAKEFILE = /usr/src/linux/Makefile

VERSION = $(shell head -10 $(LINUX_MAKEFILE) | fgrep VERSION \
	| fgrep = | fgrep -v "\#" | cut -d "=" -f 2 | tr -d ' ' )

PATCHLEVEL = $(shell head -10 $(LINUX_MAKEFILE) | fgrep PATCHLEVEL \
	| fgrep = | fgrep -v "\#" | cut -d "=" -f 2 | tr -d ' ' )

SUBLEVEL = $(shell head -10 $(LINUX_MAKEFILE) | fgrep SUBLEVEL \
	| fgrep = | fgrep -v "\#" | cut -d "=" -f 2 | tr -d ' ' )

LINUX_VERSION_CODE = $(shell echo `expr $(VERSION) \\* 65536 + \
	$(PATCHLEVEL) \\* 256 + $(SUBLEVEL)` )

SMP = $(shell head -20 $(LINUX_MAKEFILE) | fgrep SMP | fgrep -v "_PROF" \
	| fgrep = | fgrep -v "\#" | cut -d "=" -f 2 | tr -d ' ' )

SMP_PROF = $(shell head -20 $(LINUX_MAKEFILE) | fgrep SMP_PROF \
	| fgrep = | fgrep -v "\#" | cut -d "=" -f 2 | tr -d ' ' )
endif
